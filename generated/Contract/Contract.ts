// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class NewShortcutCreated extends ethereum.Event {
  get params(): NewShortcutCreated__Params {
    return new NewShortcutCreated__Params(this);
  }
}

export class NewShortcutCreated__Params {
  _event: NewShortcutCreated;

  constructor(event: NewShortcutCreated) {
    this._event = event;
  }

  get params(): NewShortcutCreatedParamsStruct {
    return changetype<NewShortcutCreatedParamsStruct>(
      this._event.parameters[0].value.toTuple()
    );
  }

  get shortcut(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class NewShortcutCreatedParamsStruct extends ethereum.Tuple {
  get router(): Address {
    return this[0].toAddress();
  }

  get tokenOut(): Address {
    return this[1].toAddress();
  }

  get chainId(): BigInt {
    return this[2].toBigInt();
  }

  get fee(): BigInt {
    return this[3].toBigInt();
  }

  get dex(): i32 {
    return this[4].toI32();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Contract extends ethereum.SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  feeOracle(): Address {
    let result = super.call("feeOracle", "feeOracle():(address)", []);

    return result[0].toAddress();
  }

  try_feeOracle(): ethereum.CallResult<Address> {
    let result = super.tryCall("feeOracle", "feeOracle():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  implementaion(): Address {
    let result = super.call("implementaion", "implementaion():(address)", []);

    return result[0].toAddress();
  }

  try_implementaion(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "implementaion",
      "implementaion():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isDestTokenOutUsed(param0: Address, param1: BigInt): boolean {
    let result = super.call(
      "isDestTokenOutUsed",
      "isDestTokenOutUsed(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBoolean();
  }

  try_isDestTokenOutUsed(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isDestTokenOutUsed",
      "isDestTokenOutUsed(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isSupportedRouter(param0: Address, param1: BigInt): boolean {
    let result = super.call(
      "isSupportedRouter",
      "isSupportedRouter(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBoolean();
  }

  try_isSupportedRouter(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isSupportedRouter",
      "isSupportedRouter(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  registeredShortcuts(param0: Address): i32 {
    let result = super.call(
      "registeredShortcuts",
      "registeredShortcuts(address):(uint8)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toI32();
  }

  try_registeredShortcuts(param0: Address): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "registeredShortcuts",
      "registeredShortcuts(address):(uint8)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  shortcutFactory(): Address {
    let result = super.call(
      "shortcutFactory",
      "shortcutFactory():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_shortcutFactory(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "shortcutFactory",
      "shortcutFactory():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  supportedChainIds(param0: BigInt): boolean {
    let result = super.call(
      "supportedChainIds",
      "supportedChainIds(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBoolean();
  }

  try_supportedChainIds(param0: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportedChainIds",
      "supportedChainIds(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  swapHandlers(param0: BigInt): Address {
    let result = super.call("swapHandlers", "swapHandlers(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_swapHandlers(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "swapHandlers",
      "swapHandlers(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class AddNewChainIdCall extends ethereum.Call {
  get inputs(): AddNewChainIdCall__Inputs {
    return new AddNewChainIdCall__Inputs(this);
  }

  get outputs(): AddNewChainIdCall__Outputs {
    return new AddNewChainIdCall__Outputs(this);
  }
}

export class AddNewChainIdCall__Inputs {
  _call: AddNewChainIdCall;

  constructor(call: AddNewChainIdCall) {
    this._call = call;
  }

  get _chainId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class AddNewChainIdCall__Outputs {
  _call: AddNewChainIdCall;

  constructor(call: AddNewChainIdCall) {
    this._call = call;
  }
}

export class AddNewDexRouterCall extends ethereum.Call {
  get inputs(): AddNewDexRouterCall__Inputs {
    return new AddNewDexRouterCall__Inputs(this);
  }

  get outputs(): AddNewDexRouterCall__Outputs {
    return new AddNewDexRouterCall__Outputs(this);
  }
}

export class AddNewDexRouterCall__Inputs {
  _call: AddNewDexRouterCall;

  constructor(call: AddNewDexRouterCall) {
    this._call = call;
  }

  get chainId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get router(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class AddNewDexRouterCall__Outputs {
  _call: AddNewDexRouterCall;

  constructor(call: AddNewDexRouterCall) {
    this._call = call;
  }
}

export class AddNewSwapHandlerCall extends ethereum.Call {
  get inputs(): AddNewSwapHandlerCall__Inputs {
    return new AddNewSwapHandlerCall__Inputs(this);
  }

  get outputs(): AddNewSwapHandlerCall__Outputs {
    return new AddNewSwapHandlerCall__Outputs(this);
  }
}

export class AddNewSwapHandlerCall__Inputs {
  _call: AddNewSwapHandlerCall;

  constructor(call: AddNewSwapHandlerCall) {
    this._call = call;
  }

  get chainId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get swapHandler(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class AddNewSwapHandlerCall__Outputs {
  _call: AddNewSwapHandlerCall;

  constructor(call: AddNewSwapHandlerCall) {
    this._call = call;
  }
}

export class ChangeFeeOracleCall extends ethereum.Call {
  get inputs(): ChangeFeeOracleCall__Inputs {
    return new ChangeFeeOracleCall__Inputs(this);
  }

  get outputs(): ChangeFeeOracleCall__Outputs {
    return new ChangeFeeOracleCall__Outputs(this);
  }
}

export class ChangeFeeOracleCall__Inputs {
  _call: ChangeFeeOracleCall;

  constructor(call: ChangeFeeOracleCall) {
    this._call = call;
  }

  get newFeeOracle(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ChangeFeeOracleCall__Outputs {
  _call: ChangeFeeOracleCall;

  constructor(call: ChangeFeeOracleCall) {
    this._call = call;
  }
}

export class ChangeImplementationCall extends ethereum.Call {
  get inputs(): ChangeImplementationCall__Inputs {
    return new ChangeImplementationCall__Inputs(this);
  }

  get outputs(): ChangeImplementationCall__Outputs {
    return new ChangeImplementationCall__Outputs(this);
  }
}

export class ChangeImplementationCall__Inputs {
  _call: ChangeImplementationCall;

  constructor(call: ChangeImplementationCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ChangeImplementationCall__Outputs {
  _call: ChangeImplementationCall;

  constructor(call: ChangeImplementationCall) {
    this._call = call;
  }
}

export class CreateShortcutCall extends ethereum.Call {
  get inputs(): CreateShortcutCall__Inputs {
    return new CreateShortcutCall__Inputs(this);
  }

  get outputs(): CreateShortcutCall__Outputs {
    return new CreateShortcutCall__Outputs(this);
  }
}

export class CreateShortcutCall__Inputs {
  _call: CreateShortcutCall;

  constructor(call: CreateShortcutCall) {
    this._call = call;
  }

  get params(): CreateShortcutCallParamsStruct {
    return changetype<CreateShortcutCallParamsStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class CreateShortcutCall__Outputs {
  _call: CreateShortcutCall;

  constructor(call: CreateShortcutCall) {
    this._call = call;
  }
}

export class CreateShortcutCallParamsStruct extends ethereum.Tuple {
  get router(): Address {
    return this[0].toAddress();
  }

  get tokenOut(): Address {
    return this[1].toAddress();
  }

  get chainId(): BigInt {
    return this[2].toBigInt();
  }

  get fee(): BigInt {
    return this[3].toBigInt();
  }

  get dex(): i32 {
    return this[4].toI32();
  }
}

export class EnableTokenOutReusageCall extends ethereum.Call {
  get inputs(): EnableTokenOutReusageCall__Inputs {
    return new EnableTokenOutReusageCall__Inputs(this);
  }

  get outputs(): EnableTokenOutReusageCall__Outputs {
    return new EnableTokenOutReusageCall__Outputs(this);
  }
}

export class EnableTokenOutReusageCall__Inputs {
  _call: EnableTokenOutReusageCall;

  constructor(call: EnableTokenOutReusageCall) {
    this._call = call;
  }

  get tokenOut(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get chainId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class EnableTokenOutReusageCall__Outputs {
  _call: EnableTokenOutReusageCall;

  constructor(call: EnableTokenOutReusageCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _implementaion(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _feeOracle(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
